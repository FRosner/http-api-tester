#!/bin/bash

function print_usage {
  echo "Usage: http-api-tester <arguments> <test_case_directory>"
  echo "Arguments:"
  echo "  -h|--help"
  echo "    print usage help"
  echo "  -c|--clean"
  echo "    delete previous run results"
  echo "  -v|--verbose"
  echo "    show more detailed information about the test runs"
  echo "  -d|--diff"
  echo "    show diff in case of test failure"
  echo "  -g|--grep \"<regex>\""
  echo "    only execute test cases matching the regex"
  echo "  -o|--operand \"<eq|ge|le>\""
  echo "    match equal, greater-or-equal than, or less-or-equal than (in jq comparison of json)"
  if [ -z "$1" ]; then
    exit 1
  else
    exit $1
  fi
}

# Parse command line arguments (http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash)
while [[ $# -gt 1 ]]; do
  key="$1"

  case $key in
    -c|--clean)
    clean=1
    ;;
    -v|--verbose)
    verbose=1
    ;;
    -d|--diff)
    detail=1
    ;;
    -h|--help)
    help=1
    ;;
    -g|--grep)
    grep=$2
    shift 1
    ;;
    -o|--operand)
    operand=$2
    shift 1
    ;;
    *)
    print_usage
    ;;
  esac
  shift 1
done

if [ ! -z $help ]; then
  print_usage 0
fi

test_case_directory=$1
test_date=$(date +"%Y-%m-%d")
test_time=$(date +"%T" | sed s/:/-/g)
test_timestamp="$test_date-$test_time"
if [ -z "$test_case_directory" ]; then
  print_usage
fi

if [ ! -d "$test_case_directory" ]; then
  echo "Test case directory $test_case_directory does not exist"
  exit 1
fi

suite_exit_code=0

function if_verbose {
  if [ ! -z "$verbose" ]; then
    "$@"
  fi
}

function if_verbose_else_devnull {
  if [ ! -z "$verbose" ]; then
    "$@"
  else
    "$@" > /dev/null
  fi
}

function test {
  test_case=$1

  run_folder="$test_case/run-$test_timestamp"

  if [[ ! -z $grep ]] && [[ ! $test_case =~ $grep ]]; then
    echo -e "  \033[1m$run_folder\033[0m:"
    echo    "    result: skipped"
    return
  fi

  if [[ -z $operand ]] ; then
    operand=eq
  fi
  echo -e "  comparison uses operand $operand"

  echo -e "  \033[1m$run_folder\033[0m:"

  if [ ! -z "$clean" ]; then
    if_verbose echo "    clean:"
    for test_result in $test_case/run-*; do
      command="rm -rf $test_result"
      if_verbose echo "      - $command"
      $command
    done
  fi

  mkdir $run_folder 2> /dev/null
  actual_folder="$run_folder/actual"
  mkdir $actual_folder 2> /dev/null
  expected_folder="$run_folder/expected"
  cp -R $test_case/expected $expected_folder 2> /dev/null

  method=$(cat $test_case/method 2> /dev/null || echo "")
  if [ -z "$method" ]; then
    method_subcommand=""
  else
    method_subcommand="-X $method"
  fi

  url=$(cat $test_case/url 2> /dev/null || echo "")
  if [ -z "$url" ]; then
    url_subcommand="localhost"
  else
    url_subcommand="$url"
  fi

  request_data=$(cat $test_case/request-data 2> /dev/null || echo "")
  if [ -z "$request_data" ]; then
    request_data_subcommand=""
  else
    request_data_subcommand="-d @$test_case/request-data"
  fi

  header_subcommand=""
  if [ -r "$test_case/request-header" ]; then
    while read header; do
      header_subcommand="$header_subcommand -H '$header'"
    done <$test_case/request-header
  fi

  curl_options=$(cat $test_case/curl-options 2> /dev/null || echo "")

  if [ -r "$test_case_directory/before-each" ]; then
    if_verbose echo "    before-each:"
    if_verbose_else_devnull bash $test_case_directory/before-each
  fi

  if [ -r "$test_case/before" ]; then
    if_verbose echo "    before:"
    if_verbose_else_devnull bash $test_case/before
  fi

  if_verbose echo "    command:"
  if [ -x "$test_case/run" ]; then
    if_verbose echo "      - $test_case/run"
    $test_case/run
    echo "$?" > $actual_folder/run-status
  else
    base_command="curl -s $curl_options $method_subcommand $header_subcommand $request_data_subcommand $url_subcommand"
    if_verbose echo "      - $base_command"
    command="$base_command --write-out status-code:%{http_code} --output $actual_folder/response-data"
    eval "$command" > $actual_folder/response-curl
  fi

  function compare {
    local actual="$actual_folder/$1"
    local expected="$expected_folder/$1"
    if [ $operand == "eq" ]; then
      jq -e --argfile actual $actual --argfile expected $expected -n '$actual == $expected' > /dev/null
      local status=$?
    elif [ $operand == "ge" ]; then
      jq -e --argfile actual $actual --argfile expected $expected -n '$actual >= $expected' > /dev/null
      local status=$?
    elif [ $operand == "le" ]; then
      jq -e --argfile actual $actual --argfile expected $expected -n '$actual <= $expected' > /dev/null
      local status=$?
    else
      echo "Don't know what to do with operand $operand, exiting";
      exit 2
    fi
    if [ $status -ne 0 ]; then
      echo -e "      - \033[0;31m$actual did not match $expected\033[0m" >&2
      if [ ! -z "$detail" ]; then
        diff $actual $expected >&2
      fi
    else
      echo -e "      - \033[0;32m$actual matched $expected\033[0m"
    fi
    return $status
  }

  expectation_found=0
  echo "    result:"
  if [ -r $actual_folder/run-status ]; then
    expectation_found=1
    local run_status="$(cat $actual_folder/run-status)"
    if [ ! $run_status = 0 ]; then
      echo -e "      - \033[0;31m$test_case/run exited with $run_status\033[0m" >&2
      suite_exit_code=$run_status
    else
      echo -e "      - \033[0;32m$test_case/run exited with $run_status\033[0m"
    fi
  else
    if [ -f $expected_folder/response-data ]; then
      expectation_found=1
      if [ -r $actual_folder/response-data ]; then
        if [ -x $expected_folder/response-data ]; then
          # response data should be checked through executable
          $expected_folder/response-data $actual_folder/response-data
          local status=$?
          if [ ! "$status" = 0 ]; then
            echo -e "      - \033[0;31m$expected_folder/response-data $actual_folder/response-data execution failed\033[0m" >&2
            suite_exit_code=$status
          else
            echo -e "      - \033[0;32m$expected_folder/response-data $actual_folder/response-data execution succeeded\033[0m"
          fi
        else
          # response data should be checked through comparing two JSONs
          cat $actual_folder/response-data | jq . > $actual_folder/response-data.json
          cat $expected_folder/response-data | jq . > $expected_folder/response-data.json
          compare response-data.json
          local status=$?
          if [ ! "$status" = 0 ]; then
            suite_exit_code=$status
          fi
        fi
      else
        echo -e "      - \033[0;31m$actual_folder/response-data does not exist\033[0m" >&2
        suite_exit_code=1
      fi
    fi

    if [ -r $expected_folder/http-status ]; then
      expectation_found=1
      grep "^status-code:" $actual_folder/response-curl | cut -d: -f2 > $actual_folder/http-status
      compare http-status
      local status=$?
      if [ ! "$status" = 0 ]; then
        suite_exit_code=$status
      fi
    fi
  fi

  if [ "$expectation_found" = 0 ]; then
    echo -e "      - \033[0;33mno expectations found in $test_case/expected\033[0m"
  fi

  if [ -r "$test_case/after" ]; then
    if_verbose echo "    after:"
    if_verbose_else_devnull bash $test_case/after
  fi

  if [ -r "$test_case_directory/after-each" ]; then
    if_verbose echo "    after-each:"
    if_verbose_else_devnull bash $test_case_directory/after-each
  fi
}

echo -e "\033[1m$test_case_directory\033[0m:"

if [ -r "$test_case_directory/before-all" ]; then
  if_verbose echo "  before-all:"
  if_verbose_else_devnull bash $test_case_directory/before-all
fi

for test_case in $test_case_directory/*; do
  [ -d "${test_case}" ] || continue
  test $test_case
done

if [ -r "$test_case_directory/after-all" ]; then
  if_verbose echo "  after-all:"
  if_verbose_else_devnull bash $test_case_directory/after-all
fi

exit $suite_exit_code
